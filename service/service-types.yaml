# In Kubernetes, a Service is a method for exposing a network application that is running as one or more Pods in your cluster.
# there are generally 4 types of services clusterIP, NodePort, LoadBalancer, externalName
# if you want your pods to only be reached internally then use clusterIP
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# if you want the pod to be accessible over the internet then use NodePort
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: MyApp
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 30007

---
#  if you are using a cloud provider cluster then setting type loadBalancer will automatically provision a loadbalancer for you which you can use to access the pod
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - port: 80
      targetPort: 80
---
# Services of type ExternalName map a Service to a DNS name, not to a typical selector such as my-service
# for example you have an app called frontend and it needs to connect to database with domain my.database.com you can create a service
# externalname with the DNS name and the DNS name is then mapped to an ec2 instance containing you database
apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: prod
spec:
  type: ExternalName
  externalName: my.database.com

---
# special service called headless service
# When there is no need of load balancing or single-service IP addresses.We create a headless service which is used for creating a service grouping. 
# That does not allocate an IP address or forward traffic.So you can do this by explicitly setting ClusterIP to “None” in the mainfest file, which means no cluster IP is allocated.
# For example, if you host MongoDB on a single pod. And you need a service definition on top of it for taking care of the pod restart.
# And also for acquiring a new IP address. But you don’t want any load balancing or routing. You just need the service to patch the request to the back-end pod. So then you use Headless Service since it does not have an IP.
# Kubernetes allows clients to discover pod IPs through DNS lookups. Usually, when you perform a DNS lookup for a service, the DNS server returns a single IP which is the service’s cluster IP. 
# But if you don’t need the cluster IP for your service, you can set ClusterIP to None , then the DNS server will return the individual pod IPs instead of the service IP.Then client can connect to any of them.
apiVersion: v1
kind: Service
metadata:
  name: headless-svc
spec:
  clusterIP: None 
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080